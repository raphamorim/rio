name: GoReleaser
on:
  push:
    branches: [ main ]
    tags:
      - 'v*.*.*'
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
jobs:
  build:
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
      discussions: write
    strategy:
      matrix:
        include:
          - os: macos-latest
            partial-by: goos
            secondary_target: x86_64-apple-darwin
          # - os: ubuntu-latest
          #   target: x86_64-unknown-linux-gnu
          #   partial-by: target
          # - os: ubuntu-24.04-arm
          #   target: aarch64-unknown-linux-gnu
          #   partial-by: target
          - os: windows-latest
            partial-by: goos
            secondary_target: aarch64-pc-windows-msvc
      fail-fast: false
    outputs:
      cache-hit: ${{ steps.cache-check.outputs.cache-hit }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/cache@v4
        with:
          path: dist/**/*
          key: goreleaser-${{ matrix.target || matrix.os }}-${{ github.sha }}
          lookup-only: true
          fail-on-cache-miss: false
          enableCrossOsArchive: true
        id: cache-check
      - if: matrix.os == 'macos-latest' || matrix.os == 'windows-latest'
        run: rustup target add ${{ matrix.secondary_target }}
      - if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') && steps.cache-check.outputs.cache-hit != 'true'
        uses: goreleaser/goreleaser-action@v6.1.0
        with:
          distribution: goreleaser-pro
          version: nightly
          args: release --clean --split # --partial-by ${{ matrix.partial-by }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
      - if: (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && !startsWith(github.ref, 'refs/tags/v'))) && steps.cache-check.outputs.cache-hit != 'true'
        uses: goreleaser/goreleaser-action@v6.1.0
        with:
          distribution: goreleaser-pro
          version: nightly
          args: release --clean --split --nightly # --partial-by ${{ matrix.partial-by }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
  release:
    # skip if cache exists for same commit, since we already released
    if: needs.build.outputs.cache-hit != 'true'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/cache@v4
        with:
          key: goreleaser-macos-latest-${{ github.sha }}
          path: dist/**/*
          fail-on-cache-miss: true
          enableCrossOsArchive: true
      - uses: actions/cache@v4
        with:
          key: goreleaser-windows-latest-${{ github.sha }}
          path: dist/**/*
          fail-on-cache-miss: true
          enableCrossOsArchive: true
      # - uses: actions/cache@v4
      #   with:
      #     key: goreleaser-x86_64-unknown-linux-gnu-${{ github.sha }}
      #     path: dist/**/*
      #     fail-on-cache-miss: true
      #     enableCrossOsArchive: true
      # - uses: actions/cache@v4
      #   with:
      #     key: goreleaser-aarch64-unknown-linux-gnu-${{ github.sha }}
      #     path: dist/**/*
      #     fail-on-cache-miss: true
      #     enableCrossOsArchive: true
      - uses: goreleaser/goreleaser-action@v6.1.0
        with:
          distribution: goreleaser-pro
          version: nightly
          args: continue --merge
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
          # macos notarization env vars
